Client_Server
1) Прочиать про клиент-серверную архитектуру
Архитектура "клиент-сервер" определяет общие принципы организации взаимодействия в сети, где имеются серверы, узлы-поставщики некоторых специфичных функций (сервисов) и клиенты, потребители этих функций.
Практические реализации такой архитектуры называют клиент-серверными технологиями. Каждая технология определяет собственные или использует имеющиеся правила взаимодействия между клиентом и сервером, которые называются протоколом обмена (протоколом взаимодействия).
Двузвенная архитектура используется в клиент-серверных системах, где сервер отвечает на клиентские запросы напрямую в полном объеме, при этом используя только собственные ресурсы, т.е. сервер не вызывает сторонние сетевые приложения и не обращается к сторонним ресурсам для выполнения какой-либо части запроса.
Трехзвенная архитектура:
1.Клиент-представление данных 2.Сервер приложений (прикладной компонент, промежуточное ПО) 3.Сервер БД (Управление ресурсами, представляет запрашиваемые данные)
+ высокая степень гибкости, масшабируемость, выше безопасность, выше производительность.
"Тонкий клиент" работа через web-интерфейс, вся прикладная логика выполняется на сервере. "Толстый клиент" пк со своей собственной дисковой ОС и необходимый набор ПО 
Кластер серверов-много серверов в системе, управляются через балансировщик, также можно балансировать и базу данных (кластер БД)
Тестировщик в первую очередь проверяет клиент! Если есть доступ к БД и серверным логам, то проверяем и их

2) Что ткое HTTP и HTTPS
HyperText Transfer Protocol. Изначально протокол передачи  HTML-документов. Сейчас используется для передачи произвольных данных в интернете, позволяет браузеру загружать страницы. Обеспечивает обмен данными между веб-браузером и веб-сервером. Для обмена информацией протокол HTTP в большинстве случаев использует TCP/IP.
HTTP имеет расширение HTTPS - HyperText Transfer Protocol Secure — безопасный протокол передачи гипертекста, которое поддерживает шифрование, обеспечивая конфиденциальность данных.

3) HTTP методы
Последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом, обычно короткое англ слово, заглавными буквами. Чувствительно к регистру
GET - запрашивает представление ресурса, только извлекает данные
HEAD - то же, что и GET, без тела, только стартовые строки и заголовки
POST - отправляет сущности к указанному ресурсу (создает новый ресурс из данных)
DELETE - удаляет ресурс
OPTIONS - описывает параметры соединения с ресурсом
TRACE - вызывает возвращаемое текстовое сообщение с ресурса (проверяет обратную связь)
PATCH - частично изменяет ресурс
PUT - меняет содержимое по указанному ресурсу

4) HTTP статус коды сервера (код состояния HTTP) - часть первой строки ответа сервера при запросах
3 цифры и поясняющая фраза на англ
5 классов 
1хх-информационные (на практике практически не встречаются)
2хх-успешные запросы
3хх-коды перенаправлений (страница переехала)
4хх-коды ошибок клиента
5хх-коды ошибок сервера

5) Что такое ядро браузера 
Браузер=оболочка (меню, панели иструментов, для работы с пользовательским интерфейсом)+ядро (программа или модуль, который отбражает контент на основе языка разметки). Ядро отвечает за получение содержимого веб-страницы, организацию информации, отображение страницы. Разные ядра браузеров по-разному интерпретируют синтаксис записи веб-страниц, поэтому отображение одной и той же страницы в браузерах разных ядер также может быть различным. Поэтому авторам веб-страниц необходимо тестировать веб-страницы в браузерах разных ядер.


6) Какие браузеры какиие ядра используют
5 типов ядер
1.Trident (IE)
2.Gesko (Mozilla Firefox) - особенность, что код открыт, можно добавлять функциональность
3.Presto (Opera) - устарело
4.Webkit (Safari, Chrome) - также открытый код
5.Blink (Chrome c 28v., Opera c 15v., Яндекс)


7) Что такое API
Application Programming Interface - интерфейс программирования приложений - это совокупность инструментов и функций в виде интерфейса для создания новых приложений, благодаря которому одна программа будет взаимодействовать с другой. 
Когда пользователь посещает любую страницу в интернете, он взаимодейтсвует с АРI удаленного сервера. Это составляющая сервера, которая получает запросы и отправляет ответы.
API позволяют 1.упростить и ускорить выпуск новых продуктов, тк можно использовать уже готовые АPI для стандартных функций 2.Сэкономить деньги, тк не нужно разрабатывать все программные решения с нуля 3.развивать собственные приложения 4. внедрять инновации.
Примеры API: API google календаря на сайте (запись на прием), API, подключающие карты на сайтах, кнопки авторизации через соцсети.

8) Что такое ендпоинты
Это некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом, адрес, на который отправляются сообщения. Чтобы связаться с API, нужно отправить ему запрос: универсальный указатель ресурса (URL), метод  (HTTP method) и в зависимости от метода добавить заголовки (headers), тело (body), параметры запроса. 
Маршрут (Route - роут) — это «имя», которое отсылает работу API к определенным эндпоинтам. Если упростить, то можно сказать, что маршрут - это URL к которому можно обратиться разными HTTP методами. Маршрут может иметь несколько эндпоинтов.
Эндпоинт (Endpoint - конечная точка) — это само обращение к маршруту отдельным HTTP методом. Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.

9) URL (URI, URL, URN)
URI - имя и адрес ресурса, вкл в себя URL и URN  https://wiki.merionet.ru/images/vse-chto-vam-nuzhno-znat-pro-devops/1.png
URL - адрес ресурса в сети, определяет местонахождение и способ обращения к нему
https://wiki.merionet.ru
URN - имя ресурса в сети, определяет только название ресурса, но не говорит, как к нему подключиться
images/vse-chto-vam-nuzhno-znat-pro-devops/1.png

10) Идемпотентные HTTP методы
При повторном выполнении результаты ожидаемо одинаковые
GET, HEAD, OPTIONS, PUT, DELETE, TRACE
Неидемпотентные - при повторном выполнении результаты будут отличаться. 
POST, PATCH

11) Безопасные HTTP методы
Не меняют данные, их можно выполнять в любой последовательности
GET, HEAD, OPTIONS

12) Иденфикация, Аутентификация, Авторизация
Идентификация - процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе. (логин пользователя)
Аутентификация- процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных. (пароль). Если доп одноразовый код, то это двухфакторная аутентификация.
Авторизация - предоставление определенному лицу или группе лиц прав на выполнение определенных действий.
Авторизация возможна без идентификации и аутентификации (google tables).

13) Что такое IP
Протокол передачи данных - набор правил, обеспечивающих связь между различными компьютерами.
Internet protocol - первый протокол, который объединил отдельные компьютеры в единую сеть. Является ненадежным, т.е. не подтверждает доставку пакетов получателю и не контролирует целостность данных. Передача данных осуществляется без установки соединение. Популярная сейчас версия IPv4 с 32-битными адресами (всего 4,29млрд адресов). Также есть версия IPv6 2^128 адресов.
TCP/IP (Transmission Control Protocol/Internet protocol)-стек протоколов TCP/IP. Первый обеспечивает и контролирует надежную передачу данных и следит за ее целостностью. Второй отвечает за маршрутизацию для отправки данных.

14) Что такое октеты в DNS
Domain name system - система доменных имен, а также протокол, без которого она не могла бы работать. "Телефонная книга" интернета, в ней хранится связь между относительно легко запоминаемым названием сайта и его трудно запоминаемым числовым адресом.
IP адрес состоит из 4х октетов, по одному байту каждый, разделенных точкой. Например 128.10.2.30 (в десятичной форме представления) в двоичной форме выглядит так: 10000000 00001010 00000010 00011110

15) Что такое порт, сколько портов у Linux сервера
Представьте, что у вас дома 2 компьютера и они подключены к одному роутеру. Для всего интернета IP адрес этих компьютеров одинаковый (так как внешний IP, который виден в интернете есть только у роутера). В этом случае, чтобы обратиться к конкретному компьютеру, нужен порт. Например, на роутере настроено, что у одного из компьютеров открыт порт 8245. Роутер имеет IP 95.84.208.79. Тогда обратиться к этому компьютеру можно так:

95.84.208.79:8245

IP адрес — это номер квартиры друга.
Порт — это комната, в которой живёт друг

16) Уровни OSI
Модель OSI (Open System Interconnection) характеризует взаимодействие сетевого оборудования
1.Физический уровень (кабели, кодирование нулей и единиц, радиочастоты)
2.Канальный уровень (мосты, коммутаторы) - проверка и исправление погрешностей передачи
3.Сетевой (роутер, маршрутизатор) (ip адреса)
4.Транспортный (TCP)
5.Сеансовый (отвечает за организацию сеансов между приложениями на компах)
6.Уровень представления (осуществляется преобразование форматов данных, напр, сжатие и кодирование)
7.Уровень приложений (протоколы передачи данных http https smtp ftp и др.)

17) Хедеры http запросов
Заголовки-спец параметры, которые несут определенную служебную инфу по соединении по HTTP
Вид Параметр: значение
Правила 1.Регистры не учитываются 2. латинские буквы 3. После параметра должно быть двоеточие 4.Окончанием пары: "Параметр: значение" служит символ переноса строки